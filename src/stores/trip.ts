import { StoreApi, create } from 'zustand'
import { createJSONStorage, devtools, persist } from 'zustand/middleware'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { ImageSourcePropType } from 'react-native'
import { TripForm, TripFormLocation } from '@/types/tripForm'
import { API_URL } from '@env'

type Set<T> = StoreApi<T>['setState']
type Get<T> = StoreApi<T>['getState']

// TODO: Update types when API is implemented
type Trip = {
  id: string | number
  end_date: Date | string
  start_date: Date | string
  name: string
  cover_photo: ImageSourcePropType
}
// Generated by https://quicktype.io

export interface Location {
  id: string
  name: string
  trip_id: string
  latitude: number
  longitude: number
  created_at: string
  updated_at: string
  images: {
    id: string
    path: string
    name: string
    created_at: string
    updated_at: string
  }[]
}

interface TripState {
  newTrip: TripForm
  newTripLocation: TripFormLocation
  locations: Location[]
  trip: Trip
  trips: Trip[]
  setTrip: (trip: Trip) => void
  setNewTrip: (trip: TripForm) => void
  setTripLocation: (item: TripFormLocation) => void
  resetNewTrip: () => void
  resetNewTripLocation: () => void
  handleCreateTrip(
    formData: TripForm,
  ): Promise<{ success: boolean; message?: string }>
  handleCreateTripLocation(formData: TripFormLocation): Promise<{
    success: boolean
    message?: string
  }>
  handleRemoveTrip(trip_id: string): Promise<{
    success: boolean
    message?: string
  }>
  resetLocations(): void
  fetchTrips(): Promise<void>
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const store = (set: Set<TripState>, get: Get<TripState>): TripState => {
  // State
  const trip = <Trip>{}
  const trips = <Trip[]>[]
  const locations = <Location[]>[]

  const newTrip = <TripForm>{}
  const newTripLocation = <TripFormLocation>{}

  // State Mutations
  const setTrip = (trip: Trip) => {
    set({
      trip: trip,
    })
  }

  const setNewTrip = (trip: TripForm) => {
    set({
      newTrip: trip,
    })
  }

  const setTripLocation = (item: TripFormLocation) => {
    set({
      newTripLocation: item,
    })
  }

  function resetNewTrip(): void {
    set({
      newTrip: <TripForm>{},
    })
  }

  function resetNewTripLocation(): void {
    set({
      newTripLocation: <TripFormLocation>{},
    })
  }

  function resetLocations(): void {
    set({
      locations: [],
    })
  }

  // API Actions
  async function handleCreateTrip(
    formData: TripForm,
  ): Promise<{ success: boolean; message?: string }> {
    const tripData = new FormData()

    tripData.append('name', formData.name)
    tripData.append('start_date', formData.start_date)
    tripData.append('end_date', formData.end_date)
    if (formData.cover_photo && Object.keys(formData.cover_photo).length > 0) {
      tripData.append('cover_photo', {
        uri: formData.cover_photo.uri,
        type: formData.cover_photo.type || 'image',
        name: formData.cover_photo.name || 'cover_photo',
      } as unknown as Blob)
    }

    try {
      const token = await AsyncStorage.getItem('token')
      const headers = {
        'Content-Type': 'multipart/form-data',
        Accept: 'application/json',
        'Accept-Encoding': 'gzip, deflate, br',
        Connection: 'keep-alive',
        Authorization: `Bearer ${token}`,
      }
      const response = await fetch(`${API_URL}/trips`, {
        method: 'POST',
        headers: {
          ...headers,
        },
        body: tripData,
      })

      if (response.ok) {
        const data = await response.json()

        set({
          newTrip: data.data,
        })

        return { success: true }
      } else {
        const data = await response.json()
        return { success: false, message: data.message }
      }
    } catch (e) {
      console.log(e)
      return { success: false }
    }
  }

  async function handleCreateTripLocation(formData: TripFormLocation) {
    const tripData = new FormData()
    tripData.append('name', formData.name)
    tripData.append('trip_id', String(formData.trip_id))
    tripData.append('latitude', String(formData.coordinates.latitude))
    tripData.append('longitude', String(formData.coordinates.longitude))
    formData.images.forEach((image) => {
      tripData.append('images[]', {
        uri: image.uri,
        type: 'image',
        name: image.name,
      } as unknown as Blob)
    })

    try {
      const token = await AsyncStorage.getItem('token')
      const headers = {
        'Content-Type': 'multipart/form-data',
        Accept: 'application/json',
        'Accept-Encoding': 'gzip, deflate, br',
        Connection: 'keep-alive',
        Authorization: `Bearer ${token}`,
      }
      const response = await fetch(`${API_URL}/locations`, {
        method: 'POST',
        headers: {
          ...headers,
        },
        body: tripData,
      })

      if (response.ok) {
        const data = await response.json()
        set({
          locations: [
            ...locations,
            {
              id: data.data.id || '',
              name: data.data.name || formData.name,
              trip_id: data.data.trip_id || newTrip.id,
              latitude: data.data.latitude || formData.coordinates.latitude,
              longitude: data.data.longitude || formData.coordinates.longitude,
              created_at: data.data.created_at || '',
              updated_at: data.data.updated_at || '',
              images: data.data.images || [],
            },
          ],
        })
        return { success: true }
      } else {
        const data = await response.json()
        return { success: false, message: data.message }
      }
    } catch (e) {
      console.log(e)
      return { success: false }
    }
  }

  async function handleRemoveTrip(
    trip_id: string,
  ): Promise<{ success: boolean; message?: string }> {
    try {
      const token = await AsyncStorage.getItem('token')
      const response = await fetch(`${API_URL}/trips/${trip_id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })
      if (response.ok) {
        const newTrips = get().trips
        set({
          trips: newTrips.filter((trip) => trip.id !== trip_id),
        })
        return { success: true }
      } else {
        console.log(response)
        return { success: false, message: `Failed to remove trip ${trip_id}` }
      }
    } catch (e) {
      console.log(e)
      return { success: false, message: `Failed to remove trip ${trip_id}` }
    }
  }
  // API Getters
  async function fetchTrips(): Promise<void> {
    try {
      const token = await AsyncStorage.getItem('token')
      const response = await fetch(`${API_URL}/trips`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
          Authorization: `Bearer ${token}`,
        },
      })

      if (response.ok) {
        const data = await response.json()

        set({
          trips: data.data,
        })
      }
    } catch (e) {
      console.log(e)
    }
  }

  return {
    // State
    newTrip,
    newTripLocation,

    trip,
    trips,
    locations,

    // State mutatations
    setTrip,
    setNewTrip,
    setTripLocation,
    resetNewTrip,
    resetNewTripLocation,
    resetLocations,

    // Api Actions
    handleCreateTrip,
    handleCreateTripLocation,
    handleRemoveTrip,

    // Api getters
    fetchTrips,
  }
}

const useTripStore = create<TripState>()(
  devtools(
    persist(store, {
      name: 'trip-store',
      storage: createJSONStorage(() => AsyncStorage),
    }),
  ),
)

export default useTripStore
